// spider/
// ‚îú‚îÄ‚îÄ eyes/markdown_eye.js - –ì–ª–∞–∑ –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è Markdown
// ‚îú‚îÄ‚îÄ legs/leg1_builder.js - –ù–æ–≥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
// ‚îú‚îÄ‚îÄ brain.js - –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö Markdown —Ñ–∞–π–ª–æ–≤
// ‚îî‚îÄ‚îÄ test_spider.js - –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞

// legs/leg1_builder.js - –ù–æ–≥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤
const fs = require('fs');
const path = require('path');

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, —É–≤–∏–¥–µ–Ω–Ω–æ–π –≥–ª–∞–∑–æ–º
 * @param {Object} structure - –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –æ—Ç –≥–ª–∞–∑–∞
 * @param {string} targetDir - –ö–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥, –≥–¥–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤)
 */
function buildStructure(structure, targetDir, options = {}) {
    console.log(`ü¶µ Leg1_Builder –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤: ${targetDir}`);

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
    const result = {
        directories: 0,
        files: 0,
        errors: 0,
        skipped: 0
    };

    // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!fs.existsSync(targetDir)) {
        try {
            fs.mkdirSync(targetDir, { recursive: true });
            result.directories++;
            console.log(`üìÅ –°–æ–∑–¥–∞–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥: ${targetDir}`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞: ${error.message}`);
            result.errors++;
            return result;
        }
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    function createNode(node, currentPath) {
        // –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, —Å–æ–∑–¥–∞–µ–º –µ—ë –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if (node.type === 'directory' && node.name !== 'root') {
            const dirPath = path.join(currentPath, node.name);

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (fs.existsSync(dirPath)) {
                console.log(`üìÅ –ü—Ä–æ–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞: ${dirPath}`);
                result.skipped++;
            } else {
                try {
                    fs.mkdirSync(dirPath, { recursive: true });
                    result.directories++;
                    console.log(`üìÅ –°–æ–∑–¥–∞–Ω –∫–∞—Ç–∞–ª–æ–≥: ${dirPath}`);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ ${dirPath}: ${error.message}`);
                    result.errors++;
                    return;
                }
            }

            // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –≤ —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if (node.files && node.files.length > 0) {
                node.files.forEach(file => {
                    const filePath = path.join(dirPath, file.name);

                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if (fs.existsSync(filePath)) {
                        console.log(`üìÑ –ü—Ä–æ–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞: ${filePath}`);
                        result.skipped++;
                    } else {
                        try {
                            fs.writeFileSync(filePath, file.content || '');
                            result.files++;
                            console.log(`üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${filePath}`);
                        } catch (error) {
                            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`);
                            result.errors++;
                        }
                    }
                });
            }

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if (node.children && node.children.length > 0) {
                node.children.forEach(child => {
                    createNode(child, dirPath);
                });
            }
        }
        // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        else if (node.type === 'root') {
            // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
            if (node.files && node.files.length > 0) {
                node.files.forEach(file => {
                    const filePath = path.join(currentPath, file.name);

                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if (fs.existsSync(filePath)) {
                        console.log(`üìÑ –ü—Ä–æ–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞: ${filePath}`);
                        result.skipped++;
                    } else {
                        try {
                            fs.writeFileSync(filePath, file.content || '');
                            result.files++;
                            console.log(`üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${filePath}`);
                        } catch (error) {
                            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`);
                            result.errors++;
                        }
                    }
                });
            }

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if (node.children && node.children.length > 0) {
                node.children.forEach(child => {
                    createNode(child, currentPath);
                });
            }
        }
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞
    createNode(structure, targetDir);

    console.log(`ü¶µ Leg1_Builder –∑–∞–≤–µ—Ä—à–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:`);
    console.log(`   üìÅ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤: ${result.directories}`);
    console.log(`   üìÑ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.files}`);
    console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${result.skipped}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${result.errors}`);

    return result;
}

module.exports = { buildStructure };