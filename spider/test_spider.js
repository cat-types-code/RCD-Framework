// test_spider.js - –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—É–∫–∞
const fs = require('fs');
const path = require('path');
const brain = require('./brain');
const markdownEye = require('./eyes/markdown_eye');
const leg1Builder = require('./legs/leg1_builder');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
const TEST_DIR = path.join(__dirname, 'test-spider');
if (!fs.existsSync(TEST_DIR)) {
    fs.mkdirSync(TEST_DIR, { recursive: true });
}

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è MD —Ñ–∞–π–ª–æ–≤
const MD_DIR = path.join(TEST_DIR, 'markdown');
if (!fs.existsSync(MD_DIR)) {
    fs.mkdirSync(MD_DIR, { recursive: true });
}

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
const TARGET_DIR = path.join(TEST_DIR, 'structure');
if (!fs.existsSync(TARGET_DIR)) {
    fs.mkdirSync(TARGET_DIR, { recursive: true });
}

// 1. Brain –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ MD —Ñ–∞–π–ª–æ–≤
console.log('üß† BRAIN: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö MD —Ñ–∞–π–ª–æ–≤...');
const mdFiles = [];

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
const simpleMarkdownPath = path.join(MD_DIR, 'simple-structure.md');
brain.generateRandomMarkdown(simpleMarkdownPath, {
    maxDepth: 2,
    totalNodes: 5,
    maxChildren: 2
});
mdFiles.push(simpleMarkdownPath);

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
const mediumMarkdownPath = path.join(MD_DIR, 'medium-structure.md');
brain.generateRandomMarkdown(mediumMarkdownPath, {
    maxDepth: 4,
    totalNodes: 10,
    maxChildren: 3
});
mdFiles.push(mediumMarkdownPath);

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
const complexMarkdownPath = path.join(MD_DIR, 'complex-structure.md');
brain.generateRandomMarkdown(complexMarkdownPath, {
    maxDepth: 5,
    totalNodes: 15,
    maxChildren: 3
});
mdFiles.push(complexMarkdownPath);

console.log(`üß† BRAIN: –°–æ–∑–¥–∞–Ω–æ ${mdFiles.length} MD —Ñ–∞–π–ª–æ–≤`);

// 2. –°–æ–∑–¥–∞–µ–º "sight" - —Å–ø–∏—Å–æ–∫ MD —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞—É–∫–∞
const sightPath = path.join(TEST_DIR, 'sight.json');
const sight = {
    markdownFiles: mdFiles,
    targetDirectory: TARGET_DIR
};

fs.writeFileSync(sightPath, JSON.stringify(sight, null, 2), 'utf8');
console.log(`üëÅÔ∏è –°–æ–∑–¥–∞–Ω sight.json —Å ${mdFiles.length} —Ñ–∞–π–ª–∞–º–∏`);

// 3. –ü–∞—É–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π MD —Ñ–∞–π–ª –∏–∑ sight
console.log('\nüï∏Ô∏è SPIDER: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...');

// –ß–∏—Ç–∞–µ–º sight.json
const sightData = JSON.parse(fs.readFileSync(sightPath, 'utf8'));

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π MD —Ñ–∞–π–ª
sightData.markdownFiles.forEach((mdFile, index) => {
    console.log(`\nüëÅÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ ${index + 1}/${sightData.markdownFiles.length}: ${path.basename(mdFile)}`);

    // –ì–ª–∞–∑ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ MD —Ñ–∞–π–ª
    const structure = markdownEye.sight(mdFile, { testMode: true });

    if (!structure) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: ${mdFile}`);
        return;
    }

    // –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    // markdownEye.visualize(structure);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const structureDir = path.join(sightData.targetDirectory, `structure-${index + 1}`);

    // –ù–æ–≥–∞ —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤
    const result = leg1Builder.buildStructure(structure, structureDir);

    console.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ ${mdFile} —Å–æ–∑–¥–∞–Ω–∞ –≤ ${structureDir}`);
});

console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');