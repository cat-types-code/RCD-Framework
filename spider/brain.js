// brain.js - –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø–∞—É–∫–∞

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {number} maxDepth - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (–Ω–µ –±–æ–ª—å—à–µ 26)
 * @param {number} totalNodes - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ (–Ω–µ —Å—á–∏—Ç–∞—è –∫–æ—Ä–µ–Ω—å)
 * @param {number} maxChildren - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π —É –æ–¥–Ω–æ–≥–æ —É–∑–ª–∞
 * @returns {Object} - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞
 */
function generateRandomTree(maxDepth = 5, totalNodes = 20, maxChildren = 5) {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –¥–æ 26 (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∞–ª—Ñ–∞–≤–∏—Ç–µ)
    maxDepth = Math.min(maxDepth, 26);

    // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª
    const root = {
        type: 'directory',
        name: 'Root',
        depth: 0,
        letter: 'A',
        index: 0,
        children: [],
        files: []
    };

    // –£–∑–ª—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–µ–π
    const availableParents = [root];

    // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º totalNodes
    let nodesAdded = 0;

    while (nodesAdded < totalNodes && availableParents.length > 0) {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        const parentIndex = Math.floor(Math.random() * availableParents.length);
        const parent = availableParents[parentIndex];

        // –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã –∏–ª–∏ –º–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        if (parent.depth >= maxDepth - 1 || parent.children.length >= maxChildren) {
            availableParents.splice(parentIndex, 1);
            continue;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—É–∫–≤—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞ (—Å–ª–µ–¥—É—é—â–∞—è –ø–æ –≥–ª—É–±–∏–Ω–µ)
        const nodeLetter = String.fromCharCode(65 + parent.depth + 1); // A=65, B=66, ...

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Ç–µ–∫—É—â–µ–π –≥–ª—É–±–∏–Ω–µ
        const nodeIndex = findNextIndexInDepth(root, parent.depth + 1);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª
        const newNode = {
            type: 'directory',
            name: `${nodeLetter}${nodeIndex}`,
            depth: parent.depth + 1,
            letter: nodeLetter,
            index: nodeIndex,
            children: [],
            files: []
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        const numFiles = Math.floor(Math.random() * 3); // 0-2 —Ñ–∞–π–ª–∞
        for (let i = 0; i < numFiles; i++) {
            newNode.files.push({
                type: 'file',
                name: `file_${newNode.name}_${i + 1}.txt`,
                content: `This is a test file ${i + 1} in directory ${newNode.name}`
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
        parent.children.push(newNode);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª –∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ä–æ–¥–∏—Ç–µ–ª—è–º
        availableParents.push(newNode);

        nodesAdded++;
    }

    return root;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω–µ
 * @param {Object} root - –ö–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞
 * @param {number} depth - –ì–ª—É–±–∏–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @returns {number} - –°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω–¥–µ–∫—Å
 */
function findNextIndexInDepth(root, depth) {
    const indices = findAllIndicesAtDepth(root, depth);
    return indices.length > 0 ? Math.max(...indices) + 1 : 1;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã —É–∑–ª–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω–µ
 * @param {Object} node - –¢–µ–∫—É—â–∏–π —É–∑–µ–ª
 * @param {number} targetDepth - –¶–µ–ª–µ–≤–∞—è –≥–ª—É–±–∏–Ω–∞
 * @param {number} currentDepth - –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞
 * @returns {Array<number>} - –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω–µ
 */
function findAllIndicesAtDepth(node, targetDepth, currentDepth = 0) {
    let indices = [];

    if (currentDepth === targetDepth) {
        indices.push(node.index);
    } else {
        for (const child of node.children) {
            indices = indices.concat(
                findAllIndicesAtDepth(child, targetDepth, currentDepth + 1)
            );
        }
    }

    return indices;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–µ—Ä–µ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç Markdown
 * @param {Object} tree - –î–µ—Ä–µ–≤–æ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
 * @returns {string} - Markdown-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
 */
function treeToMarkdown(tree) {
    let markdown = '';

    function processNode(node, depth = 0) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
        const heading = '#'.repeat(depth + 1);
        const title = depth === 0 ? '[00] Root' : `[${node.letter}${node.index}] ${node.name}`;

        markdown += `${heading} ${title}\n`;
        markdown += `–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞ –≥–ª—É–±–∏–Ω–µ ${depth}, –∏–Ω–¥–µ–∫—Å ${node.index}\n\n`;

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        for (const file of node.files) {
            markdown += `- \`${file.name}\`:\n\`\`\`\n${file.content}\n\`\`\`\n\n`;
        }

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
        for (const child of node.children) {
            processNode(child, depth + 1);
        }
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞
    processNode(tree);

    return markdown;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
 * @param {string} filePath - –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
 * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function generateRandomMarkdown(filePath, options = {}) {
    const { maxDepth = 5, totalNodes = 20, maxChildren = 5 } = options;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
    const tree = generateRandomTree(maxDepth, totalNodes, maxChildren);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Markdown
    const markdown = treeToMarkdown(tree);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    const fs = require('fs');
    fs.writeFileSync(filePath, markdown, 'utf8');

    console.log(`üß† Brain —Å–æ–∑–¥–∞–ª —Å–ª—É—á–∞–π–Ω—ã–π Markdown: ${filePath}`);
    console.log(`   –ì–ª—É–±–∏–Ω–∞: ${maxDepth}, –£–∑–ª–æ–≤: ${totalNodes}, –ú–∞–∫—Å. –¥–µ—Ç–µ–π: ${maxChildren}`);
}

module.exports = {
    generateRandomTree,
    treeToMarkdown,
    generateRandomMarkdown
};