// markdown_eye.js - –ì–ª–∞–∑ –ø–∞—É–∫–∞ –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è Markdown
const fs = require('fs');
const path = require('path');

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è - —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ Markdown –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 * @param {string} sightPath - –ü—É—Ç—å –∫ Markdown —Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ (—Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç.–¥.)
 * @returns {Object} –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä—É—é —É–≤–∏–¥–µ–ª –≥–ª–∞–∑
 */
function sight(sightPath, options = {}) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if (!fs.existsSync(sightPath)) {
        console.error(`üëÅÔ∏è –ì–ª–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª: ${sightPath}`);
        return null;
    }

    try {
        console.log(`üëÅÔ∏è –ì–ª–∞–∑ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞: ${sightPath}`);

        // –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        const content = fs.readFileSync(sightPath, 'utf8');

        // –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        const structure = perceive(content);

        // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        if (options.testMode) {
            return structure;
        }

        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ω–æ–≥–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        console.log(`üëÅÔ∏è –ì–ª–∞–∑ —É–≤–∏–¥–µ–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–æ –µ—â—ë –Ω–µ —É–º–µ–µ—Ç –µ—ë —Å–æ–∑–¥–∞–≤–∞—Ç—å`);

        return structure;
    } catch (error) {
        console.error(`üëÅÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–≥–ª—è–¥–µ: ${error.message}`);
        return null;
    }
}

/**
 * –í–æ—Å–ø—Ä–∏—è—Ç–∏–µ Markdown - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 * @param {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ Markdown —Ñ–∞–π–ª–∞
 * @returns {Object} –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤
 */
function perceive(content) {
    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const lines = content.split('\n');

    // –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    const root = {
        type: 'root',
        name: 'root',
        path: '',
        children: [],
        files: [],
        metadata: { description: '' }
    };

    // –°—Ç–µ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
    const contextStack = [root];
    let currentContext = root;

    // –§–ª–∞–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    let currentFile = null;
    let inCodeBlock = false;
    let codeBlockContent = '';
    let codeBlockLanguage = '';
    let metadataBuffer = '';

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –±–ª–æ–∫–µ –∫–æ–¥–∞
        if (line.trim().startsWith('```')) {
            if (inCodeBlock) {
                // –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∫–æ–¥–∞
                inCodeBlock = false;

                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞ –∫ —Ñ–∞–π–ª—É, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                if (currentFile) {
                    currentFile.content = codeBlockContent;
                    currentFile.language = codeBlockLanguage;
                    currentFile = null;
                }

                codeBlockContent = '';
                codeBlockLanguage = '';
            } else {
                // –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞
                inCodeBlock = true;
                codeBlockContent = '';

                // –ò–∑–≤–ª–µ–∫–∞–µ–º —è–∑—ã–∫ –∏–∑ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–≥–æ –±–ª–æ–∫–∞
                const langMatch = line.trim().match(/```(\w*)/);
                codeBlockLanguage = langMatch && langMatch[1] ? langMatch[1] : '';

                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–≥–æ –±–ª–æ–∫–∞
            }
            continue;
        }

        if (inCodeBlock) {
            // –°–æ–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞
            codeBlockContent += line + '\n';
            continue;
        }

        // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
        const headingMatch = line.match(/^(#+)\s+(.+)$/);
        if (headingMatch) {
            // –û—á–∏—â–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            if (metadataBuffer.trim()) {
                currentContext.metadata.description = metadataBuffer.trim();
                metadataBuffer = '';
            }

            const level = headingMatch[1].length;
            const title = headingMatch[2].trim();

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞—Ç–∞–ª–æ–≥–∞
            let dirName = title;
            const prefixMatch = title.match(/^\[([^\]]+)\]\s+(.+)$/);

            if (prefixMatch) {
                const prefix = prefixMatch[1];
                let name = prefixMatch[2].trim();
                name = name.replace(/\s+/g, '_');
                dirName = `${prefix}_${name}`;
            } else {
                dirName = title.replace(/\s+/g, '_');
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
            while (contextStack.length > level) {
                contextStack.pop();
            }

            // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ
            while (contextStack.length < level) {
                const parent = contextStack[contextStack.length - 1];
                const intermediateNode = {
                    type: 'directory',
                    name: `_level_${contextStack.length + 1}`,
                    children: [],
                    files: [],
                    metadata: { description: '' }
                };
                parent.children.push(intermediateNode);
                contextStack.push(intermediateNode);
            }

            // –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
            const directoryNode = {
                type: 'directory',
                name: dirName,
                title: title,
                level: level,
                children: [],
                files: [],
                metadata: { description: '' }
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ä–æ–¥–∏—Ç–µ–ª—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            const parent = contextStack[contextStack.length - 1];
            parent.children.push(directoryNode);
            contextStack[level] = directoryNode;
            currentContext = directoryNode;

            continue;
        }

        // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ (—Ñ–∞–π–ª—ã)
        const fileMatch = line.match(/^\s*-\s+`([^`]+)`\s*:?\s*(.*)$/);
        if (fileMatch) {
            const fileName = fileMatch[1].trim();
            const description = fileMatch[2].trim();

            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ñ–∞–π–ª–∞
            currentFile = {
                type: 'file',
                name: fileName,
                content: '',
                language: '',
                metadata: { description: description }
            };

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫ —Ç–µ–∫—É—â–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É
            currentContext.files.push(currentFile);

            continue;
        }

        // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (line.trim()) {
            metadataBuffer += line + '\n';
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (metadataBuffer.trim()) {
        currentContext.metadata.description = metadataBuffer.trim();
    }

    return root;
}

/**
 * –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä—É—é —É–≤–∏–¥–µ–ª –≥–ª–∞–∑ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 * @param {Object} structure - –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –æ—Ç –≥–ª–∞–∑–∞
 * @param {Object} options - –û–ø—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ (–æ—Ç—Å—Ç—É–ø—ã, —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ç.–¥.)
 */
function visualize(structure, options = {}) {
    const indent = options.indent || 2;
    const level = options.level || 0;

    // –ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üëÅÔ∏è –°–¢–†–£–ö–¢–£–†–ê, –£–í–ò–î–ï–ù–ù–ê–Ø –ì–õ–ê–ó–û–ú:');
    console.log('=================================');

    function printNode(node, depth = 0) {
        const indentation = ' '.repeat(depth * indent);

        if (node.type === 'root') {
            console.log(`${indentation}üìÅ ROOT`);
        } else if (node.type === 'directory') {
            console.log(`${indentation}üìÅ ${node.title || node.name}`);

            if (node.metadata && node.metadata.description) {
                console.log(`${indentation}  üìù ${node.metadata.description.split('\n')[0].slice(0, 50)}...`);
            }
        }

        // –í—ã–≤–æ–¥–∏–º —Ñ–∞–π–ª—ã
        if (node.files && node.files.length > 0) {
            node.files.forEach(file => {
                let icon = 'üìÑ';

                // –†–∞–∑–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
                if (file.name.endsWith('.css')) icon = 'üé®';
                else if (file.name.endsWith('.js')) icon = 'üìú';
                else if (file.name.endsWith('.md')) icon = 'üìù';

                console.log(`${indentation}  ${icon} ${file.name}`);

                if (options.showContent && file.content) {
                    const contentPreview = file.content.split('\n')[0].slice(0, 30);
                    console.log(`${indentation}    "${contentPreview}..."`);
                }
            });
        }

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–≤–æ–¥–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
        if (node.children && node.children.length > 0) {
            node.children.forEach(child => {
                printNode(child, depth + 1);
            });
        }
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞
    printNode(structure);
    console.log('=================================');
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ JSON —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 * @param {Object} structure - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
 * @param {string} outputPath - –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON
 */
function exportToJson(structure, outputPath) {
    try {
        const json = JSON.stringify(structure, null, 2);
        fs.writeFileSync(outputPath, json, 'utf8');
        console.log(`üëÅÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤: ${outputPath}`);
    } catch (error) {
        console.error(`üëÅÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${error.message}`);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
    sight,
    perceive,
    visualize,
    exportToJson
};