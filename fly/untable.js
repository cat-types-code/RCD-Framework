#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const readline = require('readline');

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const defaultOptions = {
    path: '.',
    output: null,
    depth: Infinity,
    exclude: ['node_modules', '.git'],
    showFiles: true
};

// –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫–æ–ø–∏—è defaultOptions)
let currentOptions = { ...defaultOptions };

// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function scanDirectory(dirPath, options) {
    console.log(`ü¶ã –°–∫–∞–Ω–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${dirPath}`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const rootName = path.basename(dirPath);

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    let result = `${rootName}/\n`;

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    result += scanRecursive(dirPath, '', 0, options);

    return result;
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Å—Ç—Ä–æ–∏—Ç ASCII-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
function scanRecursive(dirPath, prefix, depth, options) {
    // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    if (depth >= options.depth) {
        return '';
    }

    let result = '';

    try {
        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        const items = fs.readdirSync(dirPath);

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
        const sorted = items.sort((a, b) => {
            const aIsDir = fs.statSync(path.join(dirPath, a)).isDirectory();
            const bIsDir = fs.statSync(path.join(dirPath, b)).isDirectory();

            if (aIsDir && !bIsDir) return -1;
            if (!aIsDir && bIsDir) return 1;
            return a.localeCompare(b);
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        for (let i = 0; i < sorted.length; i++) {
            const item = sorted[i];
            const itemPath = path.join(dirPath, item);
            const isLast = i === sorted.length - 1;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            const isDir = fs.statSync(itemPath).isDirectory();
            if (isDir && options.excludeDirs.includes(item)) {
                continue;
            }

            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–ø—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞
            if (!isDir && !options.showFiles) {
                continue;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const currentPrefix = isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
            const childPrefix = isLast ? '    ' : '‚îÇ   ';

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
            result += `${prefix}${currentPrefix}${item}${isDir ? '/' : ''}\n`;

            // –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if (isDir) {
                result += scanRecursive(
                    itemPath,
                    prefix + childPrefix,
                    depth + 1,
                    options
                );
            }
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ ${dirPath}: ${error.message}`);
    }

    return result;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ASCII-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
function saveToFile(ascii, outputPath) {
    try {
        fs.writeFileSync(outputPath, ascii);
        return true;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
        return false;
    }
}

// –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏
function clearConsole() {
    process.stdout.write('\x1Bc');
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function formatCurrentSettings() {
    return `
üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
  üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${currentOptions.path === '.' ? '–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è' : currentOptions.path}
  üîç –ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${currentOptions.depth === Infinity ? '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π' : currentOptions.depth}
  üö´ –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${currentOptions.exclude.join(', ')}
  üìÑ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã: ${currentOptions.showFiles ? '–î–∞' : '–ù–µ—Ç'}
  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${currentOptions.output ? `–í —Ñ–∞–π–ª "${currentOptions.output}"` : '–¢–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å'}
`;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function showMainMenu() {
    clearConsole();
    console.log('ü¶ã Untable - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ASCII-–¥–µ—Ä–µ–≤—å–µ–≤ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π');
    console.log(formatCurrentSettings());
    console.log(`
üìú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:
  1Ô∏è‚É£ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)
  2Ô∏è‚É£ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  4Ô∏è‚É£ –í—ã—Ö–æ–¥

üëâ –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é (1-4): `);

    rl.question('', (choice) => {
        switch (choice.trim()) {
            case '1':
                quickScan();
                break;
            case '2':
                showSettingsMenu();
                break;
            case '3':
                saveDefaultSettings();
                break;
            case '4':
                console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
                rl.close();
                break;
            default:
                console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
                rl.question('', () => showMainMenu());
        }
    });
}

// –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏—è 1)
function quickScan() {
    clearConsole();
    console.log('üîç –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏');
    console.log('–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—É—Ç—å:');

    rl.question('üìÅ –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ', (inputPath) => {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ø—É—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const dirPath = inputPath.trim() || currentOptions.path;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if (!fs.existsSync(dirPath)) {
            console.log(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "${dirPath}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            rl.question('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...', () => showMainMenu());
            return;
        }

        if (!fs.statSync(dirPath).isDirectory()) {
            console.log(`‚ùå "${dirPath}" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π`);
            rl.question('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...', () => showMainMenu());
            return;
        }

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—É—Ç—å –≤ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        currentOptions.path = dirPath;

        // –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        const ascii = scanDirectory(dirPath, {
            maxDepth: currentOptions.depth,
            excludeDirs: currentOptions.exclude,
            showFiles: currentOptions.showFiles
        });

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüìä ASCII-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:');
        console.log(ascii);

        // –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
        rl.question('\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª? (–ø—É—Ç—å/n): ', (outputPath) => {
            if (outputPath.toLowerCase() !== 'n' && outputPath.trim() !== '') {
                if (saveToFile(ascii, outputPath)) {
                    console.log(`‚úÖ ASCII-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: ${outputPath}`);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    currentOptions.output = outputPath;
                }
            }

            rl.question('\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', () => showMainMenu());
        });
    });
}

// –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–æ–ø—Ü–∏—è 2)
function showSettingsMenu() {
    clearConsole();
    console.log('‚öôÔ∏è –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    console.log(formatCurrentSettings());
    console.log(`
–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
  1Ô∏è‚É£ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  2Ô∏è‚É£ –ò–∑–º–µ–Ω–∏—Ç—å –≥–ª—É–±–∏–Ω—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  4Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
  5Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  6Ô∏è‚É£ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

üëâ –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é (1-6): `);

    rl.question('', (choice) => {
        switch (choice.trim()) {
            case '1':
                changeScanDirectory();
                break;
            case '2':
                changeScanDepth();
                break;
            case '3':
                changeExcludedDirectories();
                break;
            case '4':
                toggleShowFiles();
                break;
            case '5':
                changeOutputSetting();
                break;
            case '6':
                showMainMenu();
                break;
            default:
                console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
                rl.question('', () => showSettingsMenu());
        }
    });
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function changeScanDirectory() {
    clearConsole();
    console.log('üìÅ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log(`–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${currentOptions.path}`);

    rl.question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—É—Ç—å (–∏–ª–∏ Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã): ', (input) => {
        if (input.trim()) {
            if (fs.existsSync(input) && fs.statSync(input).isDirectory()) {
                currentOptions.path = input;
                console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${input}`);
            } else {
                console.log(`‚ùå "${input}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π`);
            }
        }

        rl.question('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...', () => showSettingsMenu());
    });
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function changeScanDepth() {
    clearConsole();
    console.log('üîç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log(`–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${currentOptions.depth === Infinity ? '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π' : currentOptions.depth}`);

    rl.question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≥–ª—É–±–∏–Ω—É (—á–∏—Å–ª–æ –∏–ª–∏ "unlimited" –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π): ', (input) => {
        if (input.trim()) {
            if (input.toLowerCase() === 'unlimited') {
                currentOptions.depth = Infinity;
                console.log('‚úÖ –ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π');
            } else {
                const depth = parseInt(input);
                if (!isNaN(depth) && depth >= 0) {
                    currentOptions.depth = depth;
                    console.log(`‚úÖ –ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${depth}`);
                } else {
                    console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ì–ª—É–±–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.');
                }
            }
        }

        rl.question('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...', () => showSettingsMenu());
    });
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function changeExcludedDirectories() {
    clearConsole();
    console.log('üö´ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π');
    console.log(`–¢–µ–∫—É—â–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: ${currentOptions.exclude.join(', ')}`);

    rl.question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã): ', (input) => {
        if (input.trim()) {
            currentOptions.exclude = input.split(',').map(item => item.trim()).filter(Boolean);
            console.log(`‚úÖ –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${currentOptions.exclude.join(', ')}`);
        }

        rl.question('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...', () => showSettingsMenu());
    });
}

// –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
function toggleShowFiles() {
    currentOptions.showFiles = !currentOptions.showFiles;
    console.log(`‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ${currentOptions.showFiles ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`);

    rl.question('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...', () => showSettingsMenu());
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function changeOutputSetting() {
    clearConsole();
    console.log('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    console.log(`–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${currentOptions.output ? `–í —Ñ–∞–π–ª "${currentOptions.output}"` : '–¢–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å'}`);

    rl.question('–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–∏–ª–∏ "console" –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å): ', (input) => {
        if (input.trim()) {
            if (input.toLowerCase() === 'console') {
                currentOptions.output = null;
                console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å');
            } else {
                currentOptions.output = input;
                console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —Ñ–∞–π–ª: ${input}`);
            }
        }

        rl.question('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...', () => showSettingsMenu());
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function saveDefaultSettings() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
        const scriptDir = __dirname;
        const configPath = path.join(scriptDir, '.untable_config.json');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JSON-—Ñ–∞–π–ª
        fs.writeFileSync(configPath, JSON.stringify(currentOptions, null, 2));

        console.log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${configPath}`);
        rl.question('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...', () => showMainMenu());
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`);
        rl.question('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...', () => showMainMenu());
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
function loadSavedSettings() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
        const scriptDir = __dirname;
        const configPath = path.join(scriptDir, '.untable_config.json');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (fs.existsSync(configPath)) {
            const savedSettings = JSON.parse(fs.readFileSync(configPath, 'utf8'));

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            currentOptions = { ...defaultOptions, ...savedSettings };

            console.log('üìù –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        }
    } catch (error) {
        console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`);
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç --help –∏–ª–∏ -h, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –∏ –≤—ã—Ö–æ–¥–∏–º
if (args.includes('--help') || args.includes('-h')) {
    console.log(`
untable - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ASCII-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: untable [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --path=DIR      –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–±—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –º–µ–Ω—é)
  --help, -h      –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é.
  `);
    process.exit(0);
}

// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç --path, –≤—ã–ø–æ–ª–Ω—è–µ–º –±—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
for (const arg of args) {
    if (arg.startsWith('--path=')) {
        const dirPath = arg.substring(7);

        if (!fs.existsSync(dirPath) || !fs.statSync(dirPath).isDirectory()) {
            console.error(`‚ùå –û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "${dirPath}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π`);
            process.exit(1);
        }

        const ascii = scanDirectory(dirPath, {
            maxDepth: defaultOptions.depth,
            excludeDirs: defaultOptions.exclude,
            showFiles: defaultOptions.showFiles
        });

        console.log(ascii);
        process.exit(0);
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
loadSavedSettings();
showMainMenu();