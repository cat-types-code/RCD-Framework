// fly_brain.js - –ú–æ–∑–≥ –º—É—Ö–∏ (–ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞)
const fs = require('fs');
const path = require('path');

/**
 * –ö–ª–∞—Å—Å "–ú–æ–∑–≥" - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º—É—Ö–∏
 */
class Brain {
    /**
     * –ü–∞—Ä—Å–∏—Ç ASCII-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π
     * @param {string} asciiTree - ASCII-–¥–µ—Ä–µ–≤–æ
     * @returns {Array} - –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π
     */
    parseTree(asciiTree) {
        console.log('üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...');

        // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—É—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
        const paths = [];

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –¥–µ—Ä–µ–≤–æ
        const tree = this.buildTree(asciiTree);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ—Ä–µ–≤–æ –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π
        this.treeToPathList(tree, '', paths);

        return paths;
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ ASCII-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
     * @param {string} asciiTree - ASCII-–¥–µ—Ä–µ–≤–æ
     * @returns {Object} - –ö–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —É–∑–ª–∞–º–∏
     */
    buildTree(asciiTree) {
        // –ö–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞
        const root = { name: '', children: [], isDirectory: true };

        // –¢–µ–∫—É—â–∏–π —Å—Ç–µ–∫ —É–∑–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        const nodeStack = [root];

        // –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        let lastIndentLevel = -1;

        // –†–∞–∑–±–∏–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é
        const lines = asciiTree.split('\n');

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trimRight();

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if (!line.trim() || line.trim().startsWith('#')) {
                continue;
            }

            // –ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å—Ç—Ä–æ–∫–µ –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ —á–∞—Å—Ç—å
            const commentIndex = line.indexOf('#');
            const processLine = commentIndex !== -1 ? line.substring(0, commentIndex).trimRight() : line;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            if (!processLine.trim()) {
                continue;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –∏ –≥–ª—É–±–∏–Ω—É
            // –°—á–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã –æ—Ç—Å—Ç—É–ø–∞ (–ø—Ä–æ–±–µ–ª—ã –∏ —Ç–∞–±—ã) –¥–æ –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–ø—Ä–æ–±–µ–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            const match = processLine.match(/^[\s‚îÇ‚îú‚îî‚îÄ]*/);
            const indent = match ? match[0] : '';

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ —Å–∏–º–≤–æ–ª–∞–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –æ—Ç—Å—Ç—É–ø–∞–º
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É
            let indentLevel = 0;
            let consecutiveSpaces = 0;

            for (let j = 0; j < indent.length; j++) {
                const char = indent[j];

                if (char === ' ' || char === '\t') {
                    consecutiveSpaces++;
                    // –ö–∞–∂–¥—ã–µ 2 (–∏–ª–∏ 3 –∏–ª–∏ 4) –ø—Ä–æ–±–µ–ª–∞ —Å—á–∏—Ç–∞–µ–º –∑–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–∞
                    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    if (consecutiveSpaces >= 2) {
                        indentLevel++;
                        consecutiveSpaces = 0;
                    }
                } else if (char === '‚îÇ' || char === '‚îú' || char === '‚îî' || char === '-' || char === '|') {
                    // –°–∏–º–≤–æ–ª—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
                    if (char === '‚îÇ' || char === '|') {
                        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
                        indentLevel = Math.max(indentLevel, 1);
                    } else if (char === '‚îú' || char === '‚îî') {
                        // –≠—Ç–∏ —Å–∏–º–≤–æ–ª—ã —É–∂–µ –≥–æ–≤–æ—Ä—è—Ç –æ –Ω–∞–ª–∏—á–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
                        indentLevel++;
                    }

                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–±–µ–ª–æ–≤
                    consecutiveSpaces = 0;
                }
            }

            // –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            const name = processLine.replace(/^[\s‚îÇ‚îú‚îî‚îÄ]*/, '').trim();

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ
            if (!name) {
                continue;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ —Ñ–∞–π–ª –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥
            // –ö–∞—Ç–∞–ª–æ–≥–∏ –æ–±—ã—á–Ω–æ –Ω–µ –∏–º–µ—é—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ /
            const isDirectory = !name.includes('.') || name.endsWith('/');

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª
            const node = {
                name: name.endsWith('/') ? name.slice(0, -1) : name,
                children: [],
                isDirectory: isDirectory
            };

            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–µ–∫ —É–∑–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
            if (indentLevel > lastIndentLevel) {
                // –í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–∑–µ–ª –Ω–∞ —Å—Ç–µ–∫–µ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—è
                nodeStack[nodeStack.length - 1].children.push(node);
                nodeStack.push(node);
            } else if (indentLevel === lastIndentLevel) {
                // –í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
                nodeStack.pop(); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–∑–µ–ª
                nodeStack[nodeStack.length - 1].children.push(node);
                nodeStack.push(node);
            } else {
                // –í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —É–º–µ–Ω—å—à–∏–ª–∞—Å—å - –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –ø–æ —Å—Ç–µ–∫—É
                while (nodeStack.length > indentLevel + 1) {
                    nodeStack.pop();
                }
                nodeStack[nodeStack.length - 1].children.push(node);
                nodeStack.push(node);
            }

            lastIndentLevel = indentLevel;
        }

        return root;
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π
     * @param {Object} node - –¢–µ–∫—É—â–∏–π —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞
     * @param {string} currentPath - –¢–µ–∫—É—â–∏–π –ø—É—Ç—å
     * @param {Array} paths - –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)
     */
    treeToPathList(node, currentPath, paths) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
        const nodePath = currentPath ? `${currentPath}/${node.name}` : node.name;

        // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∏–º—è
        if (node.name) {
            paths.push({
                path: nodePath,
                isDirectory: node.isDirectory
            });
        }

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
        for (const child of node.children) {
            this.treeToPathList(child, nodePath, paths);
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –ø—É—Ç–µ–π
     * @param {Array} paths - –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π
     * @param {string} baseDir - –ë–∞–∑–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥
     */
    createStructure(paths, baseDir) {
        console.log('üìÇ –°–æ–∑–¥–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...');
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${paths.length} –ø—É—Ç–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:`);

        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–∞—Ç–∞–ª–æ–≥–∏
        for (const item of paths) {
            if (item.isDirectory) {
                const dirPath = path.join(baseDir, item.path);
                try {
                    fs.mkdirSync(dirPath, { recursive: true });
                    console.log(`  üìÅ ${dirPath}`);
                } catch (error) {
                    console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: ${error.message}`);
                }
            }
        }

        // –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
        for (const item of paths) {
            if (!item.isDirectory) {
                const filePath = path.join(baseDir, item.path);
                try {
                    // –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–∞—Ç–∞–ª–æ–≥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    const dirPath = path.dirname(filePath);
                    if (!fs.existsSync(dirPath)) {
                        fs.mkdirSync(dirPath, { recursive: true });
                    }

                    fs.writeFileSync(filePath, '');
                    console.log(`  üìÑ ${filePath}`);
                } catch (error) {
                    console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
                }
            }
        }
    }

    /**
     * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
     * @param {Object} node - –£–∑–µ–ª –¥–µ—Ä–µ–≤–∞
     * @param {number} level - –£—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
     */
    debugPrintTree(node, level = 0) {
        const indent = '  '.repeat(level);
        if (node.name) {
            console.log(`${indent}${node.isDirectory ? 'üìÅ' : 'üìÑ'} ${node.name}`);
        }
        for (const child of node.children) {
            this.debugPrintTree(child, level + 1);
        }
    }
}

module.exports = Brain;