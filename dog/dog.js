/* === dog.js –¥–ª—è entropy (—É–º–Ω–∞—è –≤–µ—Ä—Å–∏—è) === */
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
const currentDir = __dirname;
const catalogName = path.basename(currentDir);

console.log(`üêï SMART DOG –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞: ${catalogName}`);

// –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ—Ö –∫–æ—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function findCats() {
    const files = fs.readdirSync(currentDir);
    const cats = files.filter(file =>
        file.endsWith('.js') &&
        file.includes('cat') &&
        file !== 'dog.js'
    );

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ—Ç–æ–≤: ${cats.length} (${cats.join(', ')})`);
    return cats;
}

// –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
function initialize() {
    const meowPath = path.join(currentDir, 'meow.json');

    // –ï—Å–ª–∏ –Ω–µ—Ç meow.json, —Å–æ–∑–¥–∞–µ–º
    if (!fs.existsSync(meowPath)) {
        const initialMeow = {
            rats: [],
            metadata: {
                catalog: catalogName,
                description: `Auto-generated config for ${catalogName}`,
                lastUpdate: new Date().toISOString()
            }
        };

        fs.writeFileSync(meowPath, JSON.stringify(initialMeow, null, 2));
        console.log('üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π meow.json');
    }
}

// –°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫—Ä—ã—Å
function scanForRats() {
    const files = fs.readdirSync(currentDir);
    const foundRats = files.filter(file =>
        file.startsWith('rat_') &&
        file.endsWith('.css')
    ).sort();

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –∫—Ä—ã—Å: ${foundRats.length}`);
    return foundRats;
}

// –ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—É—â–∏–π meow.json
function readMeow() {
    const meowPath = path.join(currentDir, 'meow.json');
    try {
        return JSON.parse(fs.readFileSync(meowPath, 'utf8'));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è meow.json:', error);
        return null;
    }
}

// –û–±–Ω–æ–≤–ª—è–µ—Ç meow.json —Å –Ω–æ–≤—ã–º–∏ –∫—Ä—ã—Å–∞–º–∏
function updateMeow(foundRats) {
    const meow = readMeow();
    if (!meow) return false;

    const currentRats = new Set(meow.rats);
    const newRats = foundRats.filter(rat => !currentRats.has(rat));
    const removedRats = meow.rats.filter(rat => !foundRats.includes(rat));

    let changed = false;

    if (newRats.length > 0) {
        console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –∫—Ä—ã—Å: ${newRats.join(', ')}`);
        meow.rats = meow.rats.concat(newRats);
        changed = true;
    }

    if (removedRats.length > 0) {
        console.log(`‚ûñ –£–¥–∞–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä—ã—Å: ${removedRats.join(', ')}`);
        meow.rats = meow.rats.filter(rat => foundRats.includes(rat));
        changed = true;
    }

    if (changed) {
        meow.metadata.lastUpdate = new Date().toISOString();
        meow.rats.sort();

        fs.writeFileSync(
            path.join(currentDir, 'meow.json'),
            JSON.stringify(meow, null, 2)
        );

        console.log('‚úÖ meow.json –æ–±–Ω–æ–≤–ª–µ–Ω');
        return true;
    }

    console.log('üìã –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    return false;
}

// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Ö –∫–æ—Ç–æ–≤
function runAllCats() {
    const cats = findCats();

    if (cats.length === 0) {
        console.log('‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ç–∞!');
        return Promise.resolve();
    }

    console.log('üê± –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –∫–æ—Ç–æ–≤...');

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ—Ç–æ–≤
    const catPromises = cats.map(catFile => {
        return new Promise((resolve, reject) => {
            console.log(`\nüöÄ –ó–∞–ø—É—Å–∫ ${catFile}...`);

            exec(`node ${path.join(currentDir, catFile)}`, (error, stdout, stderr) => {
                if (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${catFile}:`, error.message);
                    resolve({ success: false, catFile, error });
                } else {
                    console.log(`‚úì ${catFile} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                    if (stdout) console.log(`   Output: ${stdout.trim()}`);
                    resolve({ success: true, catFile });
                }
            });
        });
    });

    // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ—Ç–æ–≤
    return Promise.all(catPromises).then(results => {
        const successful = results.filter(r => r.success).length;
        console.log(`\n‚ú® –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ—Ç–æ–≤: ${successful}/${cats.length}`);

        return successful > 0;
    });
}

// –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
function initialSync() {
    console.log('üîÑ –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
    const foundRats = scanForRats();
    const wasUpdated = updateMeow(foundRats);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –∫–æ—Ç–æ–≤
    return runAllCats();
}

// –°–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function watchDirectory() {
    console.log('üëÅÔ∏è  –ù–∞—á–∏–Ω–∞—é –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π...');

    fs.watch(currentDir, (eventType, filename) => {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (filename === 'meow.json' || filename === `${catalogName}.css` || filename?.includes('_yumiya.md')) {
            return;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—Ä—ã—Å
        if (filename && filename.startsWith('rat_') && filename.endsWith('.css')) {
            console.log(`\nüîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—Ä—ã—Å—ã: ${filename} (${eventType})`);

            setTimeout(() => {
                const foundRats = scanForRats();
                const wasUpdated = updateMeow(foundRats);

                if (wasUpdated || eventType === 'change') {
                    runAllCats().then(success => {
                        if (success) {
                            console.log('üéâ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                        }
                    });
                }
            }, 100);
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã—Ö –∫–æ—Ç–æ–≤
        if (filename && filename.endsWith('.js') && filename.includes('cat') && filename !== 'dog.js') {
            console.log(`\nüÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∫–æ—Ç: ${filename} (${eventType})`);

            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –∫–æ—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–æ–≤–æ–≥–æ)
            setTimeout(() => {
                runAllCats().then(success => {
                    if (success) {
                        console.log('üéâ –í—Å–µ –∫–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
                    }
                });
            }, 100);
        }
    });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function startDog() {
    console.log(`\nüêï SMART DOG –¥–ª—è ${catalogName} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...`);
    console.log('====================================');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initialize();

    // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    const initialSuccess = await initialSync();

    if (initialSuccess) {
        console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
        console.log('‚ö†Ô∏è  –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    }

    // –ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    watchDirectory();

    console.log('====================================');
    console.log('‚úÖ SMART DOG –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
process.on('SIGINT', () => {
    console.log('\nüëã SMART DOG –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫
startDog().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});

/* === –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ SMART DOG ===
// 1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ—Ö –∫–æ—Ç–æ–≤
// 2. –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
// 3. –°–ª–µ–¥–∏—Ç –∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∫–æ—Ç–æ–≤
// 4. –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
// 5. –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
*/