/* === dog-midd-passive.js === */
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

// MIDD —Å–æ–±–∞–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞–º–∏
const currentDir = __dirname;
const catalogName = path.basename(currentDir);

console.log(`üêï DOG-MIDD –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞: ${catalogName}`);

// –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ—Ö MIDD –∫–æ—Ç–æ–≤
function findMiddCats() {
    const files = fs.readdirSync(currentDir);
    const middCats = files.filter(file =>
        file.endsWith('.js') &&
        file.startsWith('cat-midd-') &&
        file !== 'dog-midd-passive.js'
    );

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ MIDD –∫–æ—Ç–æ–≤: ${middCats.length} (${middCats.join(', ')})`);
    return middCats;
}

// –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π
function scanSubdirectories() {
    const entries = fs.readdirSync(currentDir, { withFileTypes: true });
    const subdirs = entries.filter(entry => entry.isDirectory() && !entry.name.startsWith('.'));

    const found = {
        constructors: [],
        documentations: []
    };

    console.log(`üîç –°–∫–∞–Ω–∏—Ä—É—é ${subdirs.length} –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤...`);

    subdirs.forEach(subdir => {
        const subdirName = subdir.name;
        const subdirPath = path.join(currentDir, subdirName);

        // –ò—â–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (*.css —Å –∏–º–µ–Ω–µ–º –∫–∞—Ç–∞–ª–æ–≥–∞)
        const constructorPath = path.join(subdirPath, `${subdirName}.css`);
        if (fs.existsSync(constructorPath)) {
            found.constructors.push(`${subdirName}/${subdirName}.css`);
            console.log(`  ‚úì –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: ${subdirName}.css`);
        }

        // –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é (*.md —Å –∏–º–µ–Ω–µ–º –∫–∞—Ç–∞–ª–æ–≥–∞)
        const documentationPath = path.join(subdirPath, `${subdirName}.md`);
        if (fs.existsSync(documentationPath)) {
            found.documentations.push(`${subdirName}/${subdirName}.md`);
            console.log(`  ‚úì –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${subdirName}.md`);
        }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ: ${found.constructors.length} –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤, ${found.documentations.length} –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π`);
    return found;
}

// –ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—É—â–∏–π rawr.json
function readRawr() {
    const rawrPath = path.join(currentDir, 'rawr.json');

    try {
        if (fs.existsSync(rawrPath)) {
            return JSON.parse(fs.readFileSync(rawrPath, 'utf8'));
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è rawr.json:', error);
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π rawr.json
    return {
        constructors: [],
        documentations: [],
        metadata: {
            level: "MIDD",
            catalog: catalogName,
            description: `Auto-generated MIDD config for ${catalogName}`,
            lastUpdate: new Date().toISOString()
        }
    };
}

// –û–±–Ω–æ–≤–ª—è–µ—Ç rawr.json —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
function updateRawr(found) {
    const rawr = readRawr();

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å —Ç–µ–∫—É—â–∏–º–∏
    const currentConstructors = new Set(rawr.constructors);
    const currentDocs = new Set(rawr.documentations);

    const newConstructors = found.constructors.filter(c => !currentConstructors.has(c));
    const removedConstructors = rawr.constructors.filter(c => !found.constructors.includes(c));

    const newDocs = found.documentations.filter(d => !currentDocs.has(d));
    const removedDocs = rawr.documentations.filter(d => !found.documentations.includes(d));

    let changed = false;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
    if (newConstructors.length > 0) {
        console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã: ${newConstructors.join(', ')}`);
        rawr.constructors = rawr.constructors.concat(newConstructors);
        changed = true;
    }

    if (removedConstructors.length > 0) {
        console.log(`‚ûñ –£–¥–∞–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã: ${removedConstructors.join(', ')}`);
        rawr.constructors = rawr.constructors.filter(c => found.constructors.includes(c));
        changed = true;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    if (newDocs.length > 0) {
        console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${newDocs.join(', ')}`);
        rawr.documentations = rawr.documentations.concat(newDocs);
        changed = true;
    }

    if (removedDocs.length > 0) {
        console.log(`‚ûñ –£–¥–∞–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${removedDocs.join(', ')}`);
        rawr.documentations = rawr.documentations.filter(d => found.documentations.includes(d));
        changed = true;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    if (changed) {
        rawr.constructors.sort();
        rawr.documentations.sort();
        rawr.metadata.lastUpdate = new Date().toISOString();

        const rawrPath = path.join(currentDir, 'rawr.json');
        fs.writeFileSync(rawrPath, JSON.stringify(rawr, null, 2));
        console.log('‚úÖ rawr.json –æ–±–Ω–æ–≤–ª–µ–Ω');
        return true;
    }

    console.log('üìã –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    return false;
}

// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Ö MIDD –∫–æ—Ç–æ–≤
function runMiddCats() {
    const cats = findMiddCats();

    if (cats.length === 0) {
        console.log('‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ MIDD –∫–æ—Ç–∞!');
        return Promise.resolve();
    }

    console.log('üê± –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö MIDD –∫–æ—Ç–æ–≤...');

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ—Ç–æ–≤
    const catPromises = cats.map(catFile => {
        return new Promise((resolve, reject) => {
            console.log(`\nüöÄ –ó–∞–ø—É—Å–∫ ${catFile}...`);

            exec(`node ${path.join(currentDir, catFile)}`, (error, stdout, stderr) => {
                if (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${catFile}:`, error.message);
                    resolve({ success: false, catFile, error });
                } else {
                    console.log(`‚úì ${catFile} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                    if (stdout) console.log(`   Output: ${stdout.trim()}`);
                    resolve({ success: true, catFile });
                }
            });
        });
    });

    // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ—Ç–æ–≤
    return Promise.all(catPromises).then(results => {
        const successful = results.filter(r => r.success).length;
        console.log(`\n‚ú® –í—ã–ø–æ–ª–Ω–µ–Ω–æ MIDD –∫–æ—Ç–æ–≤: ${successful}/${cats.length}`);

        return successful > 0;
    });
}

// –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
function initialSync() {
    console.log('üîÑ –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è MIDD...');

    // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏
    const found = scanSubdirectories();

    // –û–±–Ω–æ–≤–ª—è–µ–º rawr.json
    const wasUpdated = updateRawr(found);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö MIDD –∫–æ—Ç–æ–≤
    return runMiddCats();
}

// –°–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
function watchDirectory() {
    console.log('üëÅÔ∏è  –ù–∞—á–∏–Ω–∞—é –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ MIDD –∫–∞—Ç–∞–ª–æ–≥–æ–º...');

    // –°–ª–µ–¥–∏–º –∑–∞ —Ç–µ–∫—É—â–∏–º –∫–∞—Ç–∞–ª–æ–≥–æ–º
    fs.watch(currentDir, { recursive: false }, (eventType, filename) => {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (filename === 'rawr.json' || filename === `${catalogName}.css` || filename === `${catalogName}.md`) {
            return;
        }

        // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –Ω–æ–≤—ã—Ö MIDD –∫–æ—Ç–æ–≤
        if (filename && filename.startsWith('cat-midd-') && filename.endsWith('.js')) {
            console.log(`\nüÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π MIDD –∫–æ—Ç: ${filename} (${eventType})`);

            setTimeout(() => {
                runMiddCats().then(success => {
                    if (success) {
                        console.log('üéâ –í—Å–µ MIDD –∫–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
                    }
                });
            }, 100);
        }
    });

    // –°–ª–µ–¥–∏–º –∑–∞ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞–º–∏
    const subdirs = fs.readdirSync(currentDir, { withFileTypes: true })
        .filter(entry => entry.isDirectory() && !entry.name.startsWith('.'));

    subdirs.forEach(subdir => {
        const subdirPath = path.join(currentDir, subdir.name);

        fs.watch(subdirPath, (eventType, filename) => {
            // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π
            if (filename === `${subdir.name}.css` || filename === `${subdir.name}.md`) {
                console.log(`\nüîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ ${subdir.name}/: ${filename} (${eventType})`);

                setTimeout(() => {
                    const found = scanSubdirectories();
                    const wasUpdated = updateRawr(found);

                    if (wasUpdated || eventType === 'change') {
                        runMiddCats().then(success => {
                            if (success) {
                                console.log('üéâ MIDD –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                            }
                        });
                    }
                }, 100);
            }
        });
    });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function startMiddDog() {
    console.log(`\nüêï DOG-MIDD –¥–ª—è ${catalogName} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...`);
    console.log('====================================');

    // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    const initialSuccess = await initialSync();

    if (initialSuccess) {
        console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è MIDD –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
        console.log('‚ö†Ô∏è  –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è MIDD —á–∞—Å—Ç–∏—á–Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    }

    // –ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    watchDirectory();

    console.log('====================================');
    console.log('‚úÖ DOG-MIDD –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
process.on('SIGINT', () => {
    console.log('\nüëã DOG-MIDD –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫
startMiddDog().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ MIDD:', error);
    process.exit(1);
});

/* === –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ DOG-MIDD ===
// 1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏
// 2. –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
// 3. –û–±–Ω–æ–≤–ª—è–µ—Ç rawr.json
// 4. –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Ö MIDD –∫–æ—Ç–æ–≤
// 5. –°–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞—Ö
// 6. –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º MIDD –∫–∞—Ç–∞–ª–æ–≥–µ
*/