/* === dog-big.js === */
const fs = require('fs');
const path = require('path');
const { spawn, exec } = require('child_process');

// –ì–ª–∞–≤–Ω–∞—è —Å–æ–±–∞–∫–∞ - —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
const startDir = __dirname;
const catalogName = path.basename(startDir);

console.log(`üêïüëë DOG-BIG –∑–∞–ø—É—â–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: ${catalogName}`);
console.log('====================================');

// –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ—Ö —Å–æ–±–∞–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function findDogs(directory) {
    const files = fs.readdirSync(directory);
    const dogs = {
        leaf: [], // dog.js
        midd: [], // dog-midd*.js (–ª—é–±—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏)
        big: null // dog-big.js (—ç—Ç–∞ —Å–æ–±–∞–∫–∞)
    };

    files.forEach(file => {
        if (file.endsWith('.js') && file.includes('dog')) {
            if (file === 'dog.js') {
                dogs.leaf.push(file);
            } else if (file.startsWith('dog-midd')) {
                dogs.midd.push(file);
            } else if (file === 'dog-big.js') {
                dogs.big = file;
            }
        }
    });

    return dogs;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function hasBuiltFiles(directory) {
    const dirName = path.basename(directory);
    const constructorPath = path.join(directory, `${dirName}.css`);
    const documentationPath = path.join(directory, `${dirName}.md`);

    return {
        constructor: fs.existsSync(constructorPath),
        documentation: fs.existsSync(documentationPath),
        both: fs.existsSync(constructorPath) && fs.existsSync(documentationPath)
    };
}

// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–±–∞–∫—É –∏ –∂–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function runDog(dogPath, directory) {
    return new Promise((resolve, reject) => {
        console.log(`\nüöÄ –ó–∞–ø—É—Å–∫ —Å–æ–±–∞–∫–∏: ${dogPath} –≤ ${directory}`);

        const startTime = Date.now();

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±–∞–∫—É
        const dog = spawn('node', [dogPath], {
            cwd: directory,
            stdio: ['inherit', 'pipe', 'pipe']
        });

        let output = '';
        let error = '';

        dog.stdout.on('data', (data) => {
            output += data.toString();
            // –í—ã–≤–æ–¥–∏–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            process.stdout.write(data);
        });

        dog.stderr.on('data', (data) => {
            error += data.toString();
            process.stderr.write(data);
        });

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª–∏—Å—å –ª–∏ —Ñ–∞–π–ª—ã
        const checkInterval = setInterval(() => {
            const files = hasBuiltFiles(directory);

            if (files.both) {
                console.log(`‚úÖ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±–∞–∫—É...`);
                dog.kill('SIGTERM');
                clearInterval(checkInterval);

                const duration = Date.now() - startTime;
                resolve({
                    success: true,
                    duration,
                    output,
                    files
                });
            }
        }, 500);

        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
        const timeout = setTimeout(() => {
            console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±–∞–∫—É...`);
            dog.kill('SIGTERM');
            clearInterval(checkInterval);

            const files = hasBuiltFiles(directory);
            resolve({
                success: files.both,
                timeout: true,
                output,
                error,
                files
            });
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º

        dog.on('close', (code) => {
            clearInterval(checkInterval);
            clearTimeout(timeout);

            const duration = Date.now() - startTime;
            const files = hasBuiltFiles(directory);

            resolve({
                success: files.both,
                code,
                duration,
                output,
                error,
                files
            });
        });

        dog.on('error', (err) => {
            clearInterval(checkInterval);
            clearTimeout(timeout);
            reject(err);
        });
    });
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
async function recursiveBuild(directory, level = 0) {
    const indent = '  '.repeat(level);
    const dirName = path.basename(directory);

    console.log(`\n${indent}üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞—Ç–∞–ª–æ–≥: ${dirName} (—É—Ä–æ–≤–µ–Ω—å ${level})`);

    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–±–∞–∫ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const dogs = findDogs(directory);
    console.log(`${indent}üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–±–∞–∫: leaf=${dogs.leaf.length}, midd=${dogs.midd.length}`);

    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏
    const entries = fs.readdirSync(directory, { withFileTypes: true });
    const subdirs = entries.filter(entry =>
        entry.isDirectory() &&
        !entry.name.startsWith('.') &&
        !entry.name.includes('node_modules')
    );

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
    if (subdirs.length > 0) {
        console.log(`${indent}üì¶ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤: ${subdirs.length}`);

        for (const subdir of subdirs) {
            const subdirPath = path.join(directory, subdir.name);
            await recursiveBuild(subdirPath, level + 1);
        }
    }

    // –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±–∞–∫—É —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    if (dogs.leaf.length > 0 || dogs.midd.length > 0) {
        // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–æ–±–∞–∫—É
        let dogToRun = null;

        if (subdirs.length === 0 && dogs.leaf.length > 0) {
            // –≠—Ç–æ LEAF —É—Ä–æ–≤–µ–Ω—å, –∑–∞–ø—É—Å–∫–∞–µ–º leaf —Å–æ–±–∞–∫—É
            dogToRun = dogs.leaf[0];
            console.log(`${indent}üêï –ó–∞–ø—É—Å–∫–∞—é LEAF —Å–æ–±–∞–∫—É: ${dogToRun}`);
        } else if (subdirs.length > 0 && dogs.midd.length > 0) {
            // –≠—Ç–æ MIDD —É—Ä–æ–≤–µ–Ω—å, –∑–∞–ø—É—Å–∫–∞–µ–º midd —Å–æ–±–∞–∫—É
            dogToRun = dogs.midd[0];
            console.log(`${indent}üêï –ó–∞–ø—É—Å–∫–∞—é MIDD —Å–æ–±–∞–∫—É: ${dogToRun}`);
        }

        if (dogToRun) {
            try {
                const result = await runDog(dogToRun, directory);

                if (result.success) {
                    console.log(`${indent}‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ${dirName}.css –∏ ${dirName}.md`);
                    console.log(`${indent}‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${(result.duration / 1000).toFixed(2)}s`);
                } else {
                    console.log(`${indent}‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö –≤ ${dirName}:`, result.files);
                }
            } catch (error) {
                console.error(`${indent}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ${dogToRun}:`, error);
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω—ã –ª–∏ —Ñ–∞–π–ª—ã –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
    const files = hasBuiltFiles(directory);
    if (files.both) {
        console.log(`${indent}‚ú® –ö–∞—Ç–∞–ª–æ–≥ ${dirName} —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!`);
    } else {
        console.log(`${indent}‚ö†Ô∏è  –°–±–æ—Ä–∫–∞ ${dirName} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, files);
    }

    return files.both;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function startBigDog() {
    console.log('üêïüëë DOG-BIG –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞...');
    console.log('====================================');

    const overallStartTime = Date.now();

    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Å–±–æ—Ä–∫—É
        const success = await recursiveBuild(startDir);

        const overallDuration = Date.now() - overallStartTime;

        console.log('\n====================================');
        console.log(`üèÅ DOG-BIG –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É –∑–∞ ${(overallDuration / 1000).toFixed(2)}s`);

        if (success) {
            console.log('‚úÖ –í–µ—Å—å –ø—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!');
            console.log(`üìÅ –°–æ–∑–¥–∞–Ω: ${catalogName}.css`);
            console.log(`üìö –°–æ–∑–¥–∞–Ω: ${catalogName}.md`);
        } else {
            console.log('‚ö†Ô∏è  –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
        }

        process.exit(0);
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
process.on('SIGINT', () => {
    console.log('\nüëã DOG-BIG –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫
startBigDog();

/* === DOG-BIG –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã ===
// 1. –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –∫–∞—Ç–∞–ª–æ–≥–∞–º
// 2. –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ—Ö —Å–æ–±–∞–∫ (dog.js, dog-midd*.js)
// 3. –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ (LEAF ‚Üí MIDD)
// 4. –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–æ–±–∞–∫—É –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ
// 5. –ñ–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–±–∞–∫—É
// 6. –ü–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤–≤–µ—Ä—Ö, —Å–æ–±–∏—Ä–∞—è –ø—Ä–æ–µ–∫—Ç –æ—Ç –ª–∏—Å—Ç—å–µ–≤ –∫ –∫–æ—Ä–Ω—é
// 7. –í –∏—Ç–æ–≥–µ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
*/