/* === dog-midd-active.js === */
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

// –ê–∫—Ç–∏–≤–Ω–∞—è MIDD —Å–æ–±–∞–∫–∞ - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
const currentDir = __dirname;
const catalogName = path.basename(currentDir);

console.log(`üêï‚ö° DOG-MIDD-ACTIVE –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞: ${catalogName}`);

// –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ—Ö MIDD –∫–æ—Ç–æ–≤
function findMiddCats() {
    const files = fs.readdirSync(currentDir);
    const middCats = files.filter(file =>
        file.endsWith('.js') &&
        file.startsWith('cat-midd-') &&
        !file.includes('dog-midd')
    );

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ MIDD –∫–æ—Ç–æ–≤: ${middCats.length} (${middCats.join(', ')})`);
    return middCats;
}

// –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏
function scanSubdirectories() {
    const entries = fs.readdirSync(currentDir, { withFileTypes: true });
    const subdirs = entries.filter(entry => entry.isDirectory() && !entry.name.startsWith('.'));

    const found = {
        constructors: [],
        documentations: []
    };

    console.log(`üîç –°–∫–∞–Ω–∏—Ä—É—é ${subdirs.length} –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤...`);

    subdirs.forEach(subdir => {
        const subdirName = subdir.name;
        const subdirPath = path.join(currentDir, subdirName);

        // –ò—â–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        const constructorPath = path.join(subdirPath, `${subdirName}.css`);
        if (fs.existsSync(constructorPath)) {
            found.constructors.push(`${subdirName}/${subdirName}.css`);
            console.log(`  ‚úì –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: ${subdirName}.css`);
        }

        // –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        const documentationPath = path.join(subdirPath, `${subdirName}.md`);
        if (fs.existsSync(documentationPath)) {
            found.documentations.push(`${subdirName}/${subdirName}.md`);
            console.log(`  ‚úì –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${subdirName}.md`);
        }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ: ${found.constructors.length} –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤, ${found.documentations.length} –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π`);
    return found;
}

// –û–±–Ω–æ–≤–ª—è–µ—Ç rawr.json
function updateRawr(found) {
    const rawrPath = path.join(currentDir, 'rawr.json');
    let rawr;

    try {
        if (fs.existsSync(rawrPath)) {
            rawr = JSON.parse(fs.readFileSync(rawrPath, 'utf8'));
            console.log('üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π rawr.json');
        } else {
            rawr = {
                constructors: [],
                documentations: [],
                metadata: {
                    level: "MIDD",
                    catalog: catalogName,
                    description: `Auto-generated MIDD config for ${catalogName}`,
                    lastUpdate: new Date().toISOString()
                }
            };
            console.log('üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π rawr.json');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å rawr.json:', error);
        return false;
    }

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º (–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)
    rawr.constructors = found.constructors.sort();
    rawr.documentations = found.documentations.sort();
    rawr.metadata.lastUpdate = new Date().toISOString();

    try {
        fs.writeFileSync(rawrPath, JSON.stringify(rawr, null, 2));
        console.log('‚úÖ rawr.json –æ–±–Ω–æ–≤–ª–µ–Ω');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è rawr.json:', error);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Ö MIDD –∫–æ—Ç–æ–≤
async function runMiddCats() {
    const cats = findMiddCats();

    if (cats.length === 0) {
        console.log('‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ MIDD –∫–æ—Ç–∞!');
        return false;
    }

    console.log('üê± –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö MIDD –∫–æ—Ç–æ–≤...');

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ—Ç–æ–≤
    const catPromises = cats.map(catFile => {
        return new Promise((resolve, reject) => {
            console.log(`\nüöÄ –ó–∞–ø—É—Å–∫ ${catFile}...`);

            exec(`node ${path.join(currentDir, catFile)}`, (error, stdout, stderr) => {
                if (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${catFile}:`, error.message);
                    resolve({ success: false, catFile, error });
                } else {
                    console.log(`‚úì ${catFile} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                    if (stdout) console.log(`   Output: ${stdout.trim()}`);
                    resolve({ success: true, catFile });
                }
            });
        });
    });

    // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ—Ç–æ–≤
    try {
        const results = await Promise.all(catPromises);
        const successful = results.filter(r => r.success).length;
        console.log(`\n‚ú® –í—ã–ø–æ–ª–Ω–µ–Ω–æ MIDD –∫–æ—Ç–æ–≤: ${successful}/${cats.length}`);

        return successful > 0;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ç–æ–≤:', error);
        return false;
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runActiveSequence() {
    console.log(`\nüêï‚ö° DOG-MIDD-ACTIVE –Ω–∞—á–∏–Ω–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–±–æ—Ä–∫—É...`);
    console.log('====================================');

    // –®–∞–≥ 1: –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏
    const found = scanSubdirectories();

    // –®–∞–≥ 2: –û–±–Ω–æ–≤–ª—è–µ–º rawr.json
    const rawrUpdated = updateRawr(found);
    if (!rawrUpdated) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å rawr.json');
        process.exit(1);
    }

    // –®–∞–≥ 3: –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö MIDD –∫–æ—Ç–æ–≤
    const catsSuccess = await runMiddCats();

    console.log('====================================');

    if (catsSuccess) {
        console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ MIDD –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω: ${catalogName}.css`);
        console.log(`üìö –°–æ–∑–¥–∞–Ω: ${catalogName}.md`);
    } else {
        console.log('‚ö†Ô∏è  –ê–∫—Ç–∏–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
    }

    console.log('\nüîö DOG-MIDD-ACTIVE –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É');
    process.exit(catsSuccess ? 0 : 1);
}

// –ó–∞–ø—É—Å–∫
runActiveSequence().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});

/* === dog-midd-active CLI ===
// –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
// $ node dog-midd-active.js

// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç:
// $ mkdir new-subdir
// $ cp cat.js cat-yumiia.js new-subdir/
// $ node dog-midd-active.js

// –ò–ª–∏ —á–µ—Ä–µ–∑ npm script:
// "scripts": {
//   "midd:build": "node dog-midd-active.js"
// }
*/