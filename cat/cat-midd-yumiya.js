/* === cat-midd-yumiya.js === */
const fs = require('fs');
const path = require('path');

// MIDD –∫–æ—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –≠–≤—Ç—é–º–∏–∏ –∏–∑ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤
const currentDir = __dirname;
const catalogName = path.basename(currentDir);

console.log(`üìö MIDD CAT-YUMIYA –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞: ${catalogName}`);

// –ß–∏—Ç–∞–µ—Ç rawr.json
function readRawr() {
    const rawrPath = path.join(currentDir, 'rawr.json');

    if (!fs.existsSync(rawrPath)) {
        console.error('‚ùå rawr.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return null;
    }

    try {
        return JSON.parse(fs.readFileSync(rawrPath, 'utf8'));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è rawr.json:', error);
        return null;
    }
}

// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞
function analyzeSubDocumentation(docPath) {
    const fullPath = path.join(currentDir, docPath);

    if (!fs.existsSync(fullPath)) {
        console.warn(`‚ö†Ô∏è  –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${docPath}`);
        return null;
    }

    try {
        const content = fs.readFileSync(fullPath, 'utf8');
        const lines = content.split('\n');

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const title = lines.find(l => l.startsWith('# '))?.replace('# ', '').trim();
        const description = lines.find(l => l.startsWith('> ') && !l.includes('*'))?.replace('> ', '').trim();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥—É–ª–∏
        const moduleHeaders = lines.filter(l => l.startsWith('## ') && !l.includes('üó∫Ô∏è') && !l.includes('üìä'));

        return {
            title,
            description,
            path: docPath,
            catalog: path.dirname(docPath),
            modules: moduleHeaders.map(h => h.replace('## ', '')),
            fullContent: content
        };
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${docPath}:`, error);
        return null;
    }
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç MIDD –≠–≤—Ç—é–º–∏—é
function buildMiddYumiya() {
    const rawr = readRawr();
    if (!rawr) return;

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${rawr.documentations.length} –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π –¥–ª—è —Å–±–æ—Ä–∫–∏`);

    const date = new Date().toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    let doc = `# –≠–≤—Ç—é–º–∏—è: ${catalogName.toUpperCase()} (MIDD)

> "${rawr.metadata.description || '–°–±–æ—Ä–∫–∞ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞'}"  
> *‚Äî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ MIDD CAT-YUMIYA*

## üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ MIDD —É—Ä–æ–≤–Ω—è

**–ö–∞—Ç–∞–ª–æ–≥:** ${catalogName}  
**–£—Ä–æ–≤–µ–Ω—å:** MIDD (–°—Ä–µ–¥–Ω–∏–π)  
**–ü–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏:** ${rawr.constructors.length}  
**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** ${rawr.metadata.lastUpdate}  
**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:** ${date}  

## üìÅ –ü–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ –∏ –∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

`;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    const subDocs = [];
    rawr.documentations.forEach((docPath, index) => {
        const subDoc = analyzeSubDocumentation(docPath);
        if (subDoc) {
            subDocs.push(subDoc);
            console.log(`‚úì –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${docPath}`);
        }
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞
    subDocs.forEach((subDoc, index) => {
        doc += `### ${index + 1}. üìÇ ${subDoc.catalog}/

**–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:** [${subDoc.catalog}.md](${subDoc.path})  
**–û–ø–∏—Å–∞–Ω–∏–µ:** ${subDoc.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}  
**–ú–æ–¥—É–ª–µ–π:** ${subDoc.modules.length}  

`;

        if (subDoc.modules.length > 0) {
            doc += `**–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:**\n`;
            subDoc.modules.slice(0, 5).forEach(module => {
                doc += `- ${module}\n`;
            });
            if (subDoc.modules.length > 5) {
                doc += `- *–∏ –µ—â–µ ${subDoc.modules.length - 5} –º–æ–¥—É–ª–µ–π...*\n`;
            }
            doc += '\n';
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    doc += generateMiddNavigation(subDocs);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    doc += generateMiddStatistics(subDocs, rawr);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
    doc += generateMiddRules();

    doc += `\n---\n*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${date}*\n`;
    doc += `*–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: MIDD CAT-YUMIYA v1.0*\n`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    const outputPath = path.join(currentDir, `${catalogName}.md`);

    try {
        fs.writeFileSync(outputPath, doc);
        console.log(`‚ú® –≠–≤—Ç—é–º–∏—è MIDD —Å–æ–∑–¥–∞–Ω–∞: ${outputPath}`);
        console.log(`üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${subDocs.length}/${rawr.documentations.length} –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    }
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é
function generateMiddNavigation(subDocs) {
    let nav = `## üéØ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è

### –ü–æ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞–º
`;

    subDocs.forEach(subDoc => {
        nav += `- [${subDoc.catalog}/](${subDoc.path}) - ${subDoc.modules.length} –º–æ–¥—É–ª–µ–π\n`;
    });

    // –ò—â–µ–º –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const patterns = {
        '–ê–Ω–∏–º–∞—Ü–∏–∏': subDocs.filter(d => d.modules.some(m => m.toLowerCase().includes('animation'))),
        '–≠—Ñ—Ñ–µ–∫—Ç—ã': subDocs.filter(d => d.modules.some(m => m.toLowerCase().includes('effect'))),
        '–ü–∞—Ç—Ç–µ—Ä–Ω—ã': subDocs.filter(d => d.modules.some(m => m.toLowerCase().includes('pattern')))
    };

    nav += '\n### –ü–æ —Ç–∏–ø–∞–º –º–æ–¥—É–ª–µ–π\n';
    Object.entries(patterns).forEach(([type, docs]) => {
        if (docs.length > 0) {
            nav += `#### ${type}\n`;
            docs.forEach(doc => {
                nav += `- ${doc.catalog}/ - ${doc.modules.filter(m =>
                    m.toLowerCase().includes(type.toLowerCase().slice(0, -1)))
                    .join(', ')}\n`;
            });
        }
    });

    return nav + '\n';
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
function generateMiddStatistics(subDocs, rawr) {
    const totalModules = subDocs.reduce((sum, doc) => sum + doc.modules.length, 0);
    const subCatalogs = subDocs.map(doc => doc.catalog);

    let stats = `## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MIDD

- **–ü–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤:** ${rawr.constructors.length}
- **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π:** ${subDocs.length}
- **–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π:** ${totalModules}
- **–°—Ä–µ–¥–Ω–µ–µ –º–æ–¥—É–ª–µ–π –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥:** ${Math.round(totalModules / subDocs.length)}

### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π
`;

    subDocs.forEach(doc => {
        stats += `- **${doc.catalog}**: ${doc.modules.length} –º–æ–¥—É–ª–µ–π\n`;
    });

    return stats + '\n';
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞
function generateMiddRules() {
    return `## üî• –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã —Å MIDD —É—Ä–æ–≤–Ω–µ–º

1. **–°—Ç—Ä—É–∫—Ç—É—Ä–∞** - –∫–∞–∂–¥—ã–π –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–≤–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
2. **–ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ** - cat-midd-* –¥–ª—è MIDD –∫–æ—Ç–æ–≤, dog-midd –¥–ª—è MIDD —Å–æ–±–∞–∫–∏
3. **–ü–æ—Ä—è–¥–æ–∫** - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ rawr.json –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–±–æ—Ä–∫–∏
4. **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è** - MIDD CAT —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ LEAF –∫–æ—Ç–æ–≤
5. **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤

`;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
buildMiddYumiya();