/* === cat-midd-constructor.js === */
const fs = require('fs');
const path = require('path');

// MIDD –∫–æ—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ –∏–∑ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤
const currentDir = __dirname;
const catalogName = path.basename(currentDir);

console.log(`üê± MIDD CAT-CONSTRUCTOR –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞: ${catalogName}`);

// –ß–∏—Ç–∞–µ—Ç rawr.json
function readRawr() {
    const rawrPath = path.join(currentDir, 'rawr.json');

    if (!fs.existsSync(rawrPath)) {
        console.error('‚ùå rawr.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return null;
    }

    try {
        return JSON.parse(fs.readFileSync(rawrPath, 'utf8'));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è rawr.json:', error);
        return null;
    }
}

// –°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –∏–∑ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤
function buildMiddConstructor() {
    const rawr = readRawr();
    if (!rawr) return;

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${rawr.constructors.length} –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏`);

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    let finalCSS = `/*
 * === ${catalogName.toUpperCase()} CONSTRUCTOR ===
 * –°–æ–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ MIDD CAT
 * –£—Ä–æ–≤–µ–Ω—å: MIDD
 * –ö–∞—Ç–∞–ª–æ–≥: ${catalogName}
 * –î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: ${new Date().toISOString()}
 */\n\n`;

    // –°–æ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    let assembledCount = 0;

    rawr.constructors.forEach((constructorPath, index) => {
        const fullPath = path.join(currentDir, constructorPath);
        const subCatalog = path.dirname(constructorPath);

        if (fs.existsSync(fullPath)) {
            try {
                const content = fs.readFileSync(fullPath, 'utf8');

                // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                finalCSS += `/* ===== ${index + 1}. CONSTRUCTOR: ${subCatalog} ===== */\n`;
                finalCSS += content;
                finalCSS += '\n\n';

                assembledCount++;
                console.log(`‚úì –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: ${constructorPath}`);
            } catch (error) {
                console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${constructorPath}:`, error.message);
            }
        } else {
            console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${constructorPath}`);
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
    const metadata = [
        '',
        '/* ==========================================',
        ' * –ú–ï–¢–ê–î–ê–ù–ù–´–ï MIDD –°–ë–û–†–ö–ò',
        ' * ==========================================',
        ` * –ö–∞—Ç–∞–ª–æ–≥: ${catalogName}`,
        ` * –°–æ–±—Ä–∞–Ω–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤: ${assembledCount}/${rawr.constructors.length}`,
        ` * –ü–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏: ${rawr.constructors.map(p => path.dirname(p)).join(', ')}`,
        ` * –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: ${new Date().toLocaleString('ru-RU')}`,
        ` * –ê–≤—Ç–æ—Ä: MIDD CAT-CONSTRUCTOR`,
        ' * ========================================== */'
    ];

    finalCSS += metadata.join('\n');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const outputFile = path.join(currentDir, `${catalogName}.css`);

    try {
        fs.writeFileSync(outputFile, finalCSS);
        console.log(`‚ú® –°–æ–∑–¥–∞–Ω MIDD –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: ${catalogName}.css`);
        console.log(`üìä –°–æ–±—Ä–∞–Ω–æ: ${assembledCount}/${rawr.constructors.length} –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤`);
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${outputFile}:`, error);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
buildMiddConstructor();