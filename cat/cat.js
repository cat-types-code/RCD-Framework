/* === cat-midd-constructor.js === */
const fs = require('fs');
const path = require('path');

// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–±—É–¥–µ—Ç –∏–º–µ–Ω–µ–º CSS —Ñ–∞–π–ª–∞)
const currentDir = __dirname;
const catalogName = path.basename(currentDir);

console.log(`üê± CAT –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–±–æ—Ä–∫—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞: ${catalogName}`);

// –ß–∏—Ç–∞–µ–º meow.json
function readMeow() {
    const meowPath = path.join(currentDir, 'meow.json');

    if (!fs.existsSync(meowPath)) {
        console.error('‚ùå meow.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        process.exit(1);
    }

    try {
        const meowData = JSON.parse(fs.readFileSync(meowPath, 'utf8'));
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${meowData.rats.length} –∫—Ä—ã—Å –≤ meow.json`);
        return meowData;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è meow.json:', error);
        process.exit(1);
    }
}

// –°–æ–±–∏—Ä–∞–µ–º –∫—Ä—ã—Å –ø–æ –ø–æ—Ä—è–¥–∫—É –∏–∑ meow.json
function assembleRats(meowData) {
    const assembledCSS = [];

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    assembledCSS.push(`/*`);
    assembledCSS.push(` * === ${catalogName.toUpperCase()} ===`);
    assembledCSS.push(` * –°–æ–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ RCD CAT`);
    assembledCSS.push(` * –ö–∞—Ç–∞–ª–æ–≥: ${catalogName}`);
    assembledCSS.push(` * –û–ø–∏—Å–∞–Ω–∏–µ: ${meowData.metadata.description}`);
    assembledCSS.push(` * –î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: ${new Date().toISOString()}`);
    assembledCSS.push(` */`);
    assembledCSS.push('');

    // –°–æ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—É—é –∫—Ä—ã—Å—É
    let assembledCount = 0;

    meowData.rats.forEach((ratFile, index) => {
        const ratPath = path.join(currentDir, ratFile);

        if (fs.existsSync(ratPath)) {
            try {
                const ratContent = fs.readFileSync(ratPath, 'utf8');

                // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                assembledCSS.push(`/* ===== –ù–ê–ß–ê–õ–û –ö–†–´–°–´ ${index + 1}: ${ratFile} ===== */`);
                assembledCSS.push(ratContent);
                assembledCSS.push(`/* ===== –ö–û–ù–ï–¶ –ö–†–´–°–´ ${index + 1}: ${ratFile} ===== */`);
                assembledCSS.push('');

                assembledCount++;
                console.log(`‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫—Ä—ã—Å–∞: ${ratFile}`);
            } catch (error) {
                console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${ratFile}:`, error.message);
            }
        } else {
            console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${ratFile}`);
        }
    });

    return {
        content: assembledCSS.join('\n'),
        count: assembledCount
    };
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
function saveCatalog(content) {
    const outputFile = path.join(currentDir, `${catalogName}.css`);

    try {
        fs.writeFileSync(outputFile, content);
        console.log(`‚ú® –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${catalogName}.css`);
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${outputFile}:`, error);
        return false;
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
function addMetadata(content, ratCount, meowData) {
    const metadata = [
        '',
        '/* ==========================================',
        ' * –ú–ï–¢–ê–î–ê–ù–ù–´–ï –°–ë–û–†–ö–ò',
        ' * ==========================================',
        ` * –ö–∞—Ç–∞–ª–æ–≥: ${catalogName}`,
        ` * –°–æ–±—Ä–∞–Ω–æ –∫—Ä—ã—Å: ${ratCount}/${meowData.rats.length}`,
        ` * –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: ${new Date().toLocaleString('ru-RU')}`,
        ` * –ê–≤—Ç–æ—Ä: RCD CAT`,
        ' * ========================================== */'
    ];

    return content + '\n' + metadata.join('\n');
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function buildCatalog() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞...');

    // –ß–∏—Ç–∞–µ–º meow.json
    const meowData = readMeow();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å metadata
    if (meowData.metadata.catalog !== catalogName) {
        console.warn(`‚ö†Ô∏è  –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–º–µ–Ω–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ meow.json: ${meowData.metadata.catalog} vs ${catalogName}`);
    }

    // –°–æ–±–∏—Ä–∞–µ–º –∫—Ä—ã—Å
    const result = assembleRats(meowData);

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const finalContent = addMetadata(result.content, result.count, meowData);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º
    const success = saveCatalog(finalContent);

    if (success) {
        console.log('');
        console.log('üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${catalogName}.css`);
        console.log(`üêÄ –°–æ–±—Ä–∞–Ω–æ –∫—Ä—ã—Å: ${result.count}/${meowData.rats.length}`);
    } else {
        console.log('‚ùå –°–±–æ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞!');
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
buildCatalog();

/**
 * === –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ===
 * // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è entropy
 * mkdir entropy
 * cd entropy
 *
 * // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
 * touch meow.json cat-midd-constructor.js
 * touch rat_flux.css rat_drift.css rat_spiral.css rat_turbulence.css rat_storm.css
 *
 * // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
 * node cat-midd-constructor.js
 */