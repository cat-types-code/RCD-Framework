/* === yumiya-cat-midd-constructor.js –¥–ª—è entropy (–ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥) === */
const fs = require('fs');
const path = require('path');

// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
const currentDir = __dirname;
const catalogName = path.basename(currentDir);

console.log(`üìö YUMIA-CAT –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞: ${catalogName}`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è meow.json
function readMeow() {
    const meowPath = path.join(currentDir, 'meow.json');

    if (!fs.existsSync(meowPath)) {
        console.error('‚ùå meow.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return null;
    }

    try {
        return JSON.parse(fs.readFileSync(meowPath, 'utf8'));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è meow.json:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–π –∫—Ä—ã—Å—ã
function analyzeRat(ratPath) {
    if (!fs.existsSync(ratPath)) {
        console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${ratPath}`);
        return null;
    }

    const content = fs.readFileSync(ratPath, 'utf8');
    const fileName = path.basename(ratPath);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥—É–ª–∏
    const moduleRegex = /\/\*\s*===\s*–ù–ê–ß–ê–õ–û –ú–û–î–£–õ–Ø:\s*(.+?)\s*===\s*\*\/([\s\S]*?)\/\*\s*===\s*–ö–û–ù–ï–¶ –ú–û–î–£–õ–Ø:\s*(.+?)\s*===\s*\*\//g;
    const modules = [];
    let match;

    while ((match = moduleRegex.exec(content)) !== null) {
        const moduleName = match[1];
        const moduleContent = match[2];

        modules.push({
            name: moduleName,
            content: moduleContent.trim(),
            dependencies: extractDependencies(moduleContent),
            performance: analyzePerformance(moduleContent),
            description: extractDescription(moduleContent),
            fileName: fileName
        });
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –º–æ–¥—É–ª–µ–π, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –æ–±—â–∏–π –º–æ–¥—É–ª—å
    if (modules.length === 0) {
        modules.push({
            name: fileName.replace('.css', '').replace('rat_', ''),
            content: content,
            dependencies: extractDependencies(content),
            performance: analyzePerformance(content),
            description: extractDescription(content),
            fileName: fileName
        });
    }

    return modules;
}

// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
function extractDependencies(content) {
    const varRegex = /var\((--[\w-]+)\)/g;
    const dependencies = new Set();
    let match;

    while ((match = varRegex.exec(content)) !== null) {
        dependencies.add(match[1]);
    }

    return Array.from(dependencies);
}

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
function analyzePerformance(content) {
    const heavyProps = {
        'box-shadow': '–¢—è–∂–µ–ª–æ–µ',
        'filter': '–¢—è–∂–µ–ª–æ–µ',
        'backdrop-filter': '–¢—è–∂–µ–ª–æ–µ',
        'transform': '–°—Ä–µ–¥–Ω–µ–µ',
        'animation': '–°—Ä–µ–¥–Ω–µ–µ',
        'transition': '–õ–µ–≥–∫–æ–µ'
    };

    let impact = '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ';

    for (const [prop, weight] of Object.entries(heavyProps)) {
        if (content.includes(prop)) {
            if (weight === '–¢—è–∂–µ–ª–æ–µ') return '–í—ã—Å–æ–∫–æ–µ';
            if (weight === '–°—Ä–µ–¥–Ω–µ–µ' && impact !== '–í—ã—Å–æ–∫–æ–µ') impact = '–°—Ä–µ–¥–Ω–µ–µ';
            if (weight === '–õ–µ–≥–∫–æ–µ' && impact === '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ') impact = '–ù–∏–∑–∫–æ–µ';
        }
    }

    return impact;
}

// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ
function extractDescription(content) {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    const lines = content.trim().split('\n').slice(0, 10);

    for (const line of lines) {
        const cleanLine = line.replace(/\/\*|\*\/|\*|\s+/g, ' ').trim();
        if (cleanLine.length > 10 && cleanLine.length < 100 &&
            !cleanLine.includes('@') && !cleanLine.includes(':') &&
            !cleanLine.includes('===') && !cleanLine.includes('–ù–ê–ß–ê–õ–û')) {
            return cleanLine;
        }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    const selectors = [];
    const selectorRegex = /\.([a-zA-Z-]+)/g;
    let match;

    while ((match = selectorRegex.exec(content)) !== null) {
        selectors.push(match[1]);
    }

    if (selectors.length > 0) {
        return `–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –¥–ª—è ${selectors.slice(0, 3).join(', ')}${selectors.length > 3 ? '...' : ''}`;
    }

    return '–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ —ç–Ω—Ç—Ä–æ–ø–∏–∏';
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≠–≤—Ç—é–º–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
function generateYumiyaMarkdown(allModules, meowData) {
    const date = new Date().toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });

    let content = `# üìö –≠–≤—Ç—é–º–∏—è: ${catalogName.toUpperCase()}

> "${meowData.metadata.description || '–•–∞–æ—Å –¥–∞–µ—Ç —Ä–æ–∂–¥–µ–Ω–∏–µ —Ç–∞–Ω—Ü—É—é—â–µ–π –∑–≤–µ–∑–¥–µ'}"  
> *‚Äî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ*

## üó∫Ô∏è –û–±—â–∏–π –æ–±–∑–æ—Ä

**–ö–∞—Ç–∞–ª–æ–≥:** ${catalogName}  
**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤:** ${meowData.rats.length}  
**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π:** ${allModules.length}  
**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** ${meowData.metadata.lastUpdate}  
**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:** ${date}  

## üìã –§–∞–π–ª—ã –∏ –º–æ–¥—É–ª–∏

`;

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ meow
    meowData.rats.forEach((ratFile, index) => {
        const fileModules = allModules.filter(m => m.fileName === ratFile);

        content += `### ${index + 1}. üìÑ ${ratFile}\n\n`;

        if (fileModules.length === 0) {
            content += `*–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–æ–¥—É–ª–µ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω*\n\n`;
            return;
        }

        fileModules.forEach((module, moduleIndex) => {
            content += `#### ${moduleIndex + 1}. ${module.name}\n\n`;
            content += `**–û–ø–∏—Å–∞–Ω–∏–µ:** ${module.description}\n\n`;

            if (module.dependencies.length > 0) {
                content += `**–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:**\n`;
                module.dependencies.forEach(dep => {
                    content += `- \`${dep}\`\n`;
                });
                content += '\n';
            }

            content += `**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${module.performance}\n\n`;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞
            const snippet = module.content.split('\n').slice(0, 8).join('\n');
            content += `**–ö–æ–¥:**\n\`\`\`css\n${snippet}${module.content.split('\n').length > 8 ? '\n...' : ''}\n\`\`\`\n\n`;

            content += '---\n\n';
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏
    content += generateQuickNavigation(allModules);
    content += generateStatistics(allModules, meowData);
    content += generateRules();

    content += `\n---\n*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${date}*\n`;
    content += `*–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: YUMIA-CAT v2.0 (—á–µ—Ä–µ–∑ meow.json)*\n`;

    return content;
}

// –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
function generateQuickNavigation(modules) {
    let nav = `## üéØ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è\n\n`;

    const categoryMap = {
        '–ê–Ω–∏–º–∞—Ü–∏—è': modules.filter(m => m.content.includes('animation') || m.content.includes('@keyframes')),
        '–≠—Ñ—Ñ–µ–∫—Ç—ã': modules.filter(m => m.content.includes('transform') || m.content.includes('filter')),
        '–¶–≤–µ—Ç–∞': modules.filter(m => m.dependencies.some(d => d.includes('color'))),
        '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': modules.filter(m => m.performance === '–í—ã—Å–æ–∫–æ–µ')
    };

    Object.entries(categoryMap).forEach(([category, categoryModules]) => {
        if (categoryModules.length > 0) {
            nav += `### ${category}\n`;
            categoryModules.forEach(module => {
                nav += `- **${module.fileName}** ‚Üí ${module.name}\n`;
            });
            nav += '\n';
        }
    });

    return nav;
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
function generateStatistics(modules, meowData) {
    const stats = modules.reduce((acc, m) => {
        acc.performance[m.performance] = (acc.performance[m.performance] || 0) + 1;
        m.dependencies.forEach(dep => acc.variables.add(dep));
        return acc;
    }, {
        performance: {},
        variables: new Set()
    });

    let content = `## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n`;
    content += `- **–§–∞–π–ª–æ–≤ –∫—Ä—ã—Å:** ${meowData.rats.length}\n`;
    content += `- **–ú–æ–¥—É–ª–µ–π:** ${modules.length}\n`;
    content += `- **–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:** ${stats.variables.size}\n`;
    content += `- **–ü–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**\n`;

    Object.entries(stats.performance).forEach(([perf, count]) => {
        content += `  - ${perf}: ${count}\n`;
    });

    content += '\n';

    // –¢–æ–ø –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const varCount = new Map();
    modules.forEach(m => {
        m.dependencies.forEach(dep => {
            varCount.set(dep, (varCount.get(dep) || 0) + 1);
        });
    });

    const topVars = Array.from(varCount.entries())
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5);

    if (topVars.length > 0) {
        content += `### –¢–æ–ø-5 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö\n`;
        topVars.forEach(([varName, count]) => {
            content += `- \`${varName}\` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${count} —Ä–∞–∑\n`;
        });
        content += '\n';
    }

    return content;
}

// –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã
function generateRules() {
    return `## üî• –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã —Å entropy

1. **–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å** - –∫–∞–∂–¥–∞—è –∫—Ä—ã—Å–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–≤–æ—é –∑–∞–¥–∞—á—É
2. **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** - –∏–∑–±–µ–≥–∞–π—Ç–µ —Ç—è–∂–µ–ª—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
3. **–ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ** - —Ñ–∞–π–ª—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å \`rat_\`
4. **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è** - –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ –º–æ–¥—É–ª–∏ –≤ –∫—Ä—ã—Å–∞—Ö
5. **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ** - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ–∑–¥–µ
6. **–ü–æ—Ä—è–¥–æ–∫** - —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –≤ meow.json

`;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function generateYumiya() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≠–≤—Ç—é–º–∏–∏...');

    // –ß–∏—Ç–∞–µ–º meow.json
    const meowData = readMeow();
    if (!meowData) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å meow.json');
        return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${meowData.rats.length} –∫—Ä—ã—Å –≤ meow.json`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫—Ä—ã—Å—É
    const allModules = [];
    meowData.rats.forEach(ratFile => {
        const ratPath = path.join(currentDir, ratFile);
        const modules = analyzeRat(ratPath);

        if (modules) {
            allModules.push(...modules);
            console.log(`‚úì –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ${ratFile}: ${modules.length} –º–æ–¥—É–ª–µ–π`);
        }
    });

    console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${allModules.length} –º–æ–¥—É–ª–µ–π`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Markdown
    const yumiyaContent = generateYumiyaMarkdown(allModules, meowData);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const outputPath = path.join(currentDir, `${catalogName}.md`);

    try {
        fs.writeFileSync(outputPath, yumiyaContent, 'utf8');
        console.log(`‚ú® –≠–≤—Ç—é–º–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${outputPath}`);

        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('\nüìä –ò—Ç–æ–≥:');
        console.log(`- –§–∞–π–ª–æ–≤: ${meowData.rats.length}`);
        console.log(`- –ú–æ–¥—É–ª–µ–π: ${allModules.length}`);
        console.log(`- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${new Set(allModules.flatMap(m => m.dependencies)).size}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫
generateYumiya();